import { create } from 'zustand';
import { db } from '../db/dexie';
import { Achievement, Streak } from '../db/models';
import { v4 as uuid } from 'uuid';
import { format, startOfDay, isSameDay, addDays, subDays } from 'date-fns';

type AchievementsState = {
  achievements: Achievement[];
  streaks: Streak[];
  load: () => Promise<void>;
  checkAchievements: (tips: any[], dailyTarget: number) => Promise<void>;
  getUnlockedAchievements: () => Achievement[];
  getStreak: (type: 'daily_target') => Streak | undefined;
  updateStreak: (type: 'daily_target', achieved: boolean) => Promise<void>;
  resetAchievements: () => Promise<void>;
};

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const ACHIEVEMENT_DEFINITIONS = [
  // –î–Ω–µ–≤–Ω—ã–µ —Ü–µ–ª–∏
  { id: 'first_target', type: 'daily_target', title: '–ü–µ—Ä–≤–∞—è —Ü–µ–ª—å', description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏ –≤–ø–µ—Ä–≤—ã–µ', icon: 'üéØ', maxProgress: 1, rarity: 'common' },
  { id: 'target_3_days', type: 'daily_target', title: '–¢—Ä–∏ –¥–Ω—è –ø–æ–¥—Ä—è–¥', description: '–î–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–∏ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥', icon: 'üî•', maxProgress: 3, rarity: 'rare' },
  { id: 'target_7_days', type: 'daily_target', title: '–ù–µ–¥–µ–ª—è —É—Å–ø–µ—Ö–∞', description: '–î–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–∏ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', icon: 'üí™', maxProgress: 7, rarity: 'epic' },
  { id: 'target_30_days', type: 'daily_target', title: '–ú–µ—Å—è—Ü –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞', description: '–î–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–∏ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', icon: 'üëë', maxProgress: 30, rarity: 'legendary' },
  
  // –û–±—â–∏–µ —Å—É–º–º—ã
  { id: 'first_1000', type: 'total_amount', title: '–ü–µ—Ä–≤–∞—è —Ç—ã—Å—è—á–∞', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1000‚ÇΩ —á–∞–µ–≤—ã—Ö', icon: 'üí∞', maxProgress: 1000, rarity: 'common' },
  { id: 'first_10000', type: 'total_amount', title: '–î–µ—Å—è—Ç—å —Ç—ã—Å—è—á', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 10000‚ÇΩ —á–∞–µ–≤—ã—Ö', icon: 'üíé', maxProgress: 10000, rarity: 'rare' },
  { id: 'first_50000', type: 'total_amount', title: '–ü—è—Ç—å–¥–µ—Å—è—Ç —Ç—ã—Å—è—á', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 50000‚ÇΩ —á–∞–µ–≤—ã—Ö', icon: 'üèÜ', maxProgress: 50000, rarity: 'epic' },
  { id: 'first_100000', type: 'total_amount', title: '–°–æ—Ç–Ω—è —Ç—ã—Å—è—á', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 100000‚ÇΩ —á–∞–µ–≤—ã—Ö', icon: 'üí∏', maxProgress: 100000, rarity: 'legendary' },
  
  // –ë–æ–ª—å—à–∏–µ —á–∞–µ–≤—ã–µ
  { id: 'big_tip_500', type: 'big_tip', title: '–©–µ–¥—Ä—ã–π –∫–ª–∏–µ–Ω—Ç', description: '–ü–æ–ª—É—á–∏—Ç–µ —á–∞–µ–≤—ã–µ 500‚ÇΩ –∏–ª–∏ –±–æ–ª—å—à–µ', icon: 'üéÅ', maxProgress: 1, rarity: 'rare' },
  { id: 'big_tip_1000', type: 'big_tip', title: '–û—á–µ–Ω—å —â–µ–¥—Ä—ã–π', description: '–ü–æ–ª—É—á–∏—Ç–µ —á–∞–µ–≤—ã–µ 1000‚ÇΩ –∏–ª–∏ –±–æ–ª—å—à–µ', icon: 'üíù', maxProgress: 1, rarity: 'epic' },
  { id: 'big_tip_2000', type: 'big_tip', title: '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —â–µ–¥—Ä—ã–π', description: '–ü–æ–ª—É—á–∏—Ç–µ —á–∞–µ–≤—ã–µ 2000‚ÇΩ –∏–ª–∏ –±–æ–ª—å—à–µ', icon: 'üéä', maxProgress: 1, rarity: 'legendary' },
  
  // –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
  { id: 'consistency_7', type: 'consistency', title: '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', description: '–î–æ–±–∞–≤–ª—è–π—Ç–µ —á–∞–µ–≤—ã–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', icon: 'üìà', maxProgress: 7, rarity: 'rare' },
  { id: 'consistency_30', type: 'consistency', title: '–ü—Ä–∏–≤—ã—á–∫–∞', description: '–î–æ–±–∞–≤–ª—è–π—Ç–µ —á–∞–µ–≤—ã–µ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', icon: 'üìä', maxProgress: 30, rarity: 'epic' },
];

export const useAchievements = create<AchievementsState>((set, get) => ({
  achievements: [],
  streaks: [],
  
  async load() {
    const achievements = await db.achievements.orderBy('unlockedAt').reverse().toArray();
    const streaks = await db.streaks.toArray();
    set({ achievements, streaks });
  },
  
  getUnlockedAchievements() {
    return get().achievements.filter(a => a.progress >= a.maxProgress);
  },
  
  getStreak(type) {
    return get().streaks.find(s => s.type === type);
  },
  
  async updateStreak(type, achieved) {
    const { streaks } = get();
    const today = format(startOfDay(new Date()), 'yyyy-MM-dd');
    let streak = streaks.find(s => s.type === type);
    
    if (!streak) {
      streak = {
        id: uuid(),
        type,
        currentStreak: 0,
        longestStreak: 0,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      };
    }
    
    if (achieved) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ª–∏ –¥–µ–Ω—å
      if (streak.lastAchievedDate) {
        const lastDate = new Date(streak.lastAchievedDate);
        const todayDate = new Date(today);
        const daysDiff = Math.floor((todayDate.getTime() - lastDate.getTime()) / (1000 * 60 * 60 * 24));
        
        if (daysDiff === 1) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç—Ä–µ–∫
          streak.currentStreak += 1;
        } else if (daysDiff > 1) {
          // –°–±—Ä–æ—Å —Å—Ç—Ä–µ–∫–∞
          streak.currentStreak = 1;
        }
        // –ï—Å–ª–∏ daysDiff === 0, —Ç–æ —É–∂–µ —Å—á–∏—Ç–∞–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      } else {
        // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å
        streak.currentStreak = 1;
      }
      
      streak.longestStreak = Math.max(streak.longestStreak, streak.currentStreak);
      streak.lastAchievedDate = today;
    }
    
    streak.updatedAt = Date.now();
    await db.streaks.put(streak);
    
    set(state => ({
      streaks: state.streaks.filter(s => s.type !== type).concat(streak!)
    }));
  },
  
  async checkAchievements(tips, dailyTarget) {
    const { achievements } = get();
    const today = format(startOfDay(new Date()), 'yyyy-MM-dd');
    const todayTips = tips.filter(tip => isSameDay(new Date(tip.createdAt), new Date()));
    const todayTotal = todayTips.reduce((sum, tip) => sum + tip.amount, 0);
    const totalAmount = tips.reduce((sum, tip) => sum + tip.amount, 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏
    if (todayTotal >= dailyTarget) {
      await get().updateStreak('daily_target', true);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    for (const def of ACHIEVEMENT_DEFINITIONS) {
      let existingAchievement = achievements.find(a => a.id === def.id);
      let progress = 0;
      let shouldUpdate = false;
      
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (!existingAchievement) {
        existingAchievement = {
          id: def.id,
          type: def.type as any,
          title: def.title,
          description: def.description,
          icon: def.icon,
          unlockedAt: 0,
          progress: 0,
          maxProgress: def.maxProgress,
          rarity: def.rarity as any,
        };
        await db.achievements.put(existingAchievement);
        set(state => ({
          achievements: [...state.achievements, existingAchievement!]
        }));
      }
      
      switch (def.type) {
        case 'daily_target':
          if (todayTotal >= dailyTarget) {
            progress = Math.min(def.maxProgress, (existingAchievement?.progress || 0) + 1);
            shouldUpdate = true;
          }
          break;
          
        case 'total_amount':
          progress = Math.min(def.maxProgress, totalAmount);
          shouldUpdate = progress > (existingAchievement?.progress || 0);
          break;
          
        case 'big_tip':
          const hasBigTip = tips.some(tip => tip.amount >= def.maxProgress);
          if (hasBigTip) {
            progress = def.maxProgress;
            shouldUpdate = !existingAchievement;
          }
          break;
          
        case 'consistency':
          // –°—á–∏—Ç–∞–µ–º –¥–Ω–∏ –ø–æ–¥—Ä—è–¥ —Å —á–∞–µ–≤—ã–º–∏
          const daysWithTips = new Set();
          tips.forEach(tip => {
            daysWithTips.add(format(startOfDay(new Date(tip.createdAt)), 'yyyy-MM-dd'));
          });
          
          let consecutiveDays = 0;
          const sortedDays = Array.from(daysWithTips).sort().reverse() as string[];
          for (let i = 0; i < sortedDays.length; i++) {
            if (i === 0 || 
                Math.floor((new Date(sortedDays[i-1]).getTime() - new Date(sortedDays[i]).getTime()) / (1000 * 60 * 60 * 24)) === 1) {
              consecutiveDays++;
            } else {
              break;
            }
          }
          
          progress = Math.min(def.maxProgress, consecutiveDays);
          shouldUpdate = progress > (existingAchievement?.progress || 0);
          break;
      }
      
      if (shouldUpdate) {
        existingAchievement.progress = progress;
        if (progress >= def.maxProgress && existingAchievement.unlockedAt === 0) {
          existingAchievement.unlockedAt = Date.now();
        }
        await db.achievements.put(existingAchievement);
        
        set(state => ({
          achievements: state.achievements.filter(a => a.id !== def.id).concat(existingAchievement!)
        }));
      }
    }
  },

  resetAchievements: async () => {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.achievements.clear();
    await db.streaks.clear();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    set({ achievements: [], streaks: [] });
    
    console.log('üóëÔ∏è –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã');
  }
}));
